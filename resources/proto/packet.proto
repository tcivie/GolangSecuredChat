syntax = "proto3";
package securedChat;

option go_package = "github.com/tcivie/GolangSecuredChat/pb";

message Message {
    enum messageSource {
        CLIENT = 0;
        SERVER = 1;
    }

    messageSource source = 1;
    optional string fromUsername = 2;
    oneof packet {
        LoginPacket loginMessage = 3;
        ExchangeKeyPacket exchangeKeyMessage = 4;
        ChatPacket chatMessage = 5;
        RegisterPacket registerMessage = 6;
    }
}

message LoginPacket {
    enum Status {
        REQUEST_TO_LOGIN = 0; // The user requests to login with username
        //
        ENCRYPTED_TOKEN = 1; // The server sends the encrypted token to the user (With the user's public key)
        DECRYPTED_TOKEN = 2; // The user sends the decrypted token
        //
        LOGIN_SUCCESS = 3; // The server sends the login status
        LOGIN_FAILED = 4; // The server sends the login status
    }

    Status status = 1;
    optional bytes token = 2;
}

message RegisterPacket {
    enum Status {
        REQUEST_TO_REGISTER = 0; // The user requests to register with username
        REGISTER_REPLY = 1; // Server replies with the register status
        //
        REGISTER_SUCCESS = 2;
        REGISTER_FAILED = 3;
    }

    Status status = 1;
    optional bytes publicKey = 2;
}

message ExchangeKeyPacket {
    enum Status {
        REQUEST_TO_EXCHANGE_KEY = 0; // The user requests to exchange key with another user

        PUB_KEY_FROM_SERVER = 1; // The server sends the requested user's public key to the user
        MESSAGE_WITH_SYM_KEY = 2; // The user sends the encrypted message with the symmetric key
        EXCHANGE_KEY_REPLY = 3; // The client replies with the exchange key status
    }
    enum ExchangeKeyStatus {
        EXCHANGE_KEY_SUCCESS = 0;
        EXCHANGE_KEY_FAILED = 1;
    }
    Status status = 1;
    optional string toUsername = 2; // To whom the packet is addressed
    optional bytes publicKey = 3; // The public key of the user
    optional bytes encryptedMessage = 4; // The encrypted message with the symmetric key
    optional ExchangeKeyStatus exchangeKeyStatus = 5; // The status of the exchange key (Success or Failed)
}

message ChatPacket {
    string toUsername = 1;
    string message = 2;
}
